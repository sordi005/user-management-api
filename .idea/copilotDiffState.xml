<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env" />
              <option name="originalContent" value="# =================================================&#10;# Variables de Entorno para User Management API&#10;# =================================================&#10;&#10;# =================================================&#10;# BASE DE DATOS POSTGRESQL&#10;# =================================================&#10;DB_HOST=localhost&#10;DB_PORT=5432&#10;DB_NAME=user_management&#10;DB_USERNAME=user&#10;DB_PASSWORD=1234&#10;&#10;# =================================================&#10;# APLICACIÓN SPRING BOOT&#10;# =================================================&#10;SERVER_PORT=8086&#10;SPRING_PROFILES_ACTIVE=dev&#10;&#10;# =================================================&#10;# JWT (JSON Web Tokens)&#10;# =================================================&#10;JWT_SECRET=mi_super_secreto_jwt_key_debe_tener_minimo_32_caracteres_para_ser_seguro&#10;JWT_EXPIRATION_MS=86400000&#10;&#10;# =================================================&#10;# LOGGING&#10;# =================================================&#10;LOG_LEVEL_APP=DEBUG&#10;LOG_LEVEL_SECURITY=DEBUG&#10;SHOW_SQL=true&#10;&#10;# =================================================&#10;# ACTUATOR (Monitoring)&#10;# =================================================&#10;ACTUATOR_ENDPOINTS=health,info,metrics&#10;" />
              <option name="updatedContent" value="# =================================================&#10;# Variables de Entorno para User Management API&#10;# =================================================&#10;&#10;# =================================================&#10;# BASE DE DATOS POSTGRESQL&#10;# =================================================&#10;DB_HOST=localhost&#10;DB_PORT=5432&#10;DB_NAME=user_management&#10;DB_USERNAME=user&#10;DB_PASSWORD=1234&#10;&#10;# =================================================&#10;# APLICACIÓN SPRING BOOT&#10;# =================================================&#10;SERVER_PORT=8086&#10;SPRING_PROFILES_ACTIVE=dev&#10;&#10;# =================================================&#10;# JWT (JSON Web Tokens)&#10;# =================================================&#10;JWT_SECRET=mi_super_secreto_jwt_key_debe_tener_minimo_32_caracteres_para_ser_seguro&#10;JWT_EXPIRATION_MS=86400000&#10;&#10;# =================================================&#10;# LOGGING&#10;# =================================================&#10;LOG_LEVEL_APP=DEBUG&#10;LOG_LEVEL_SECURITY=DEBUG&#10;SHOW_SQL=true&#10;&#10;# =================================================&#10;# ACTUATOR (Monitoring)&#10;# =================================================&#10;ACTUATOR_ENDPOINTS=health,info,metrics&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.env.example">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env.example" />
              <option name="updatedContent" value="# =================================================&#10;# Variables de Entorno para User Management API&#10;# =================================================&#10;# IMPORTANTE: Este archivo NO se sube a GitHub&#10;# Cópialo como .env y configura tus valores&#10;&#10;# =================================================&#10;# BASE DE DATOS POSTGRESQL&#10;# =================================================&#10;DB_HOST=localhost&#10;DB_PORT=5432&#10;DB_NAME=user_management&#10;DB_USERNAME=sordi005&#10;DB_PASSWORD=dev123&#10;&#10;# =================================================&#10;# PGADMIN (Herramienta gráfica para PostgreSQL)&#10;# =================================================&#10;PGADMIN_EMAIL=admin@example.com&#10;PGADMIN_PASSWORD=admin123&#10;PGADMIN_PORT=5050&#10;&#10;# =================================================&#10;# APLICACIÓN SPRING BOOT&#10;# =================================================&#10;SERVER_PORT=8086&#10;SPRING_PROFILE=dev&#10;&#10;# =================================================&#10;# JWT (JSON Web Tokens)&#10;# =================================================&#10;JWT_SECRET=mi_super_secreto_jwt_key_debe_tener_minimo_32_caracteres_para_ser_seguro&#10;JWT_EXPIRATION_MS=86400000&#10;&#10;# =================================================&#10;# LOGGING&#10;# =================================================&#10;LOG_LEVEL_APP=DEBUG&#10;LOG_LEVEL_SECURITY=DEBUG&#10;SHOW_SQL=true&#10;&#10;# =================================================&#10;# ACTUATOR (Monitoring)&#10;# =================================================&#10;ACTUATOR_ENDPOINTS=health,info,metrics" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="HELP.md&#10;target/&#10;!.mvn/wrapper/maven-wrapper.jar&#10;!**/src/main/**/target/&#10;!**/src/test/**/target/&#10;&#10;### STS ###&#10;.apt_generated&#10;.classpath&#10;.factorypath&#10;.project&#10;.settings&#10;.springBeans&#10;.sts4-cache&#10;&#10;### IntelliJ IDEA ###&#10;.idea&#10;*.iws&#10;*.iml&#10;*.ipr&#10;&#10;### NetBeans ###&#10;/nbproject/private/&#10;/nbbuild/&#10;/dist/&#10;/nbdist/&#10;/.nb-gradle/&#10;build/&#10;!**/src/main/**/build/&#10;!**/src/test/**/build/&#10;&#10;### VS Code ###&#10;.vscode/&#10;&#10;# Environment Variables (NO subir al repo)&#10;.env&#10;.env.local&#10;.env.production&#10;&#10;# Database&#10;*.db&#10;*.sqlite&#10;&#10;# IDE específico&#10;.vscode/&#10;.idea/&#10;*.iml&#10;&#10;# OS específico  &#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Logs&#10;logs/&#10;*.log&#10;&#10;### Archivos temporales ###&#10;*.tmp&#10;*.temp&#10;&#10;### Docker ###&#10;.docker/" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="services:&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    container_name: user-api-postgres&#10;    environment:&#10;      POSTGRES_DB: ${DB_NAME}&#10;      POSTGRES_USER: ${DB_USERNAME}&#10;      POSTGRES_PASSWORD: ${DB_PASSWORD}&#10;      POSTGRES_INITDB_ARGS: &quot;--encoding=UTF-8&quot;&#10;    ports:&#10;      - &quot;${DB_PORT}:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql&#10;    networks:&#10;      - user-api-network&#10;    restart: unless-stopped&#10;&#10;volumes:&#10;  postgres_data:&#10;&#10;networks:&#10;  user-api-network:&#10;    driver: bridge&#10;" />
              <option name="updatedContent" value="services:&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    container_name: user-api-postgres&#10;    environment:&#10;      POSTGRES_DB: ${DB_NAME}&#10;      POSTGRES_USER: ${DB_USERNAME}&#10;      POSTGRES_PASSWORD: ${DB_PASSWORD}&#10;      POSTGRES_INITDB_ARGS: &quot;--encoding=UTF-8&quot;&#10;    ports:&#10;      - &quot;${DB_PORT}:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;    networks:&#10;      - user-api-network&#10;    restart: unless-stopped&#10;&#10;volumes:&#10;  postgres_data:&#10;&#10;networks:&#10;  user-api-network:&#10;    driver: bridge" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/setup-env-windows.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/setup-env-windows.bat" />
              <option name="updatedContent" value="@echo off&#10;echo ========================================&#10;echo   Configurando Variables de Entorno&#10;echo   para User Management API&#10;echo ========================================&#10;&#10;REM Base de Datos&#10;set DB_HOST=localhost&#10;set DB_PORT=5432&#10;set DB_NAME=user_management&#10;set DB_USERNAME=dev_user&#10;set DB_PASSWORD=dev123&#10;&#10;REM JWT&#10;set JWT_SECRET=mi_super_secreto_jwt_key_de_32_caracteres_minimo&#10;set JWT_EXPIRATION_MS=86400000&#10;&#10;REM Logging&#10;set LOG_LEVEL_APP=DEBUG&#10;set LOG_LEVEL_SECURITY=DEBUG&#10;set SHOW_SQL=true&#10;&#10;REM Actuator&#10;set ACTUATOR_ENDPOINTS=health,info,metrics&#10;&#10;echo.&#10;echo ✅ Variables configuradas para esta sesión&#10;echo.&#10;echo Para hacerlas permanentes:&#10;echo 1. Panel de Control ^&gt; Sistema ^&gt; Variables de entorno&#10;echo 2. O usar: setx VARIABLE_NAME &quot;valor&quot;&#10;echo." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application-dev.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application-dev.yml" />
              <option name="originalContent" value="spring:&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:user_management}&#10;    username: ${DB_USERNAME:user}&#10;    password: ${DB_PASSWORD:1234}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: ${SHOW_SQL:true}&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;&#10;  flyway:&#10;    enabled: true&#10;    locations: classpath:db/migration&#10;    baseline-on-migrate: true&#10;&#10;server:&#10;  port: ${SERVER_PORT:8086}&#10;&#10;logging:&#10;  level:&#10;    com.sordi.usermanagement: ${LOG_LEVEL_APP:DEBUG}&#10;    org.springframework.security: ${LOG_LEVEL_SECURITY:DEBUG}&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: ${ACTUATOR_ENDPOINTS:health,info,metrics}&#10;" />
              <option name="updatedContent" value="spring:&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:user_management}&#10;    username: ${DB_USERNAME:user}&#10;    password: ${DB_PASSWORD:1234}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: update&#10;    show-sql: ${SHOW_SQL:true}&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;&#10;  flyway:&#10;    enabled: true&#10;    locations: classpath:db/migration&#10;    baseline-on-migrate: true&#10;&#10;server:&#10;  port: ${SERVER_PORT:8086}&#10;&#10;logging:&#10;  level:&#10;    com.sordi.usermanagement: ${LOG_LEVEL_APP:DEBUG}&#10;    org.springframework.security: ${LOG_LEVEL_SECURITY:DEBUG}&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: ${ACTUATOR_ENDPOINTS:health,info,metrics}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=user-management-api&#10;server.port=8085&#10;" />
              <option name="updatedContent" value="spring.application.name=user-management-api&#10;server.port=8086" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>