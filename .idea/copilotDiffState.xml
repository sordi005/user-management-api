<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env.example">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env.example" />
              <option name="updatedContent" value="# =================================================&#10;# Variables de Entorno para User Management API&#10;# =================================================&#10;# IMPORTANTE: Este archivo NO se sube a GitHub&#10;# Cópialo como .env y configura tus valores&#10;&#10;# =================================================&#10;# BASE DE DATOS POSTGRESQL&#10;# =================================================&#10;DB_HOST=localhost&#10;DB_PORT=5432&#10;DB_NAME=user_management&#10;DB_USERNAME=sordi005&#10;DB_PASSWORD=dev123&#10;&#10;# =================================================&#10;# PGADMIN (Herramienta gráfica para PostgreSQL)&#10;# =================================================&#10;PGADMIN_EMAIL=admin@example.com&#10;PGADMIN_PASSWORD=admin123&#10;PGADMIN_PORT=5050&#10;&#10;# =================================================&#10;# APLICACIÓN SPRING BOOT&#10;# =================================================&#10;SERVER_PORT=8086&#10;SPRING_PROFILE=dev&#10;&#10;# =================================================&#10;# JWT (JSON Web Tokens)&#10;# =================================================&#10;JWT_SECRET=mi_super_secreto_jwt_key_debe_tener_minimo_32_caracteres_para_ser_seguro&#10;JWT_EXPIRATION_MS=86400000&#10;&#10;# =================================================&#10;# LOGGING&#10;# =================================================&#10;LOG_LEVEL_APP=DEBUG&#10;LOG_LEVEL_SECURITY=DEBUG&#10;SHOW_SQL=true&#10;&#10;# =================================================&#10;# ACTUATOR (Monitoring)&#10;# =================================================&#10;ACTUATOR_ENDPOINTS=health,info,metrics" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="#  User Management API&#10;&#10;##  Descripción&#10;API REST para gestión de usuarios desarrollada con Spring Boot 3. Incluye autenticación JWT, operaciones CRUD completas y arquitectura profesional con manejo de excepciones.&#10;&#10;##  Tecnologías Utilizadas&#10;- **Java 21** - Lenguaje de programación&#10;- **Spring Boot 3.5.4** - Framework principal&#10;- **Spring Security** - Autenticación y autorización&#10;- **JWT** - Tokens de autenticación&#10;- **Spring Data JPA** - Persistencia de datos&#10;- **PostgreSQL** - Base de datos principal&#10;- **H2** - Base de datos para testing&#10;- **Flyway** - Migraciones de base de datos&#10;- **Maven** - Gestión de dependencias&#10;- **Swagger/OpenAPI** - Documentación de API&#10;- **Lombok** - Reducción de código boilerplate&#10;- **MapStruct** - Mapeo de objetos&#10;&#10;##  Características&#10;- ✅ **CRUD completo de usuarios**&#10;- ✅ **Autenticación JWT con refresh tokens**&#10;- ✅ **Validaciones de datos robustas**&#10;- ✅ **Manejo global de excepciones**&#10;- ✅ **Documentación automática con Swagger**&#10;- ✅ **Configuración por ambientes (dev/test/prod)**&#10;- ✅ **Migraciones de base de datos con Flyway**&#10;- ✅ **Testing unitario e integración**&#10;&#10;## ️ Arquitectura&#10;```&#10;src/main/java/com/sordi/userManagement/&#10;├── config/           # Configuraciones de seguridad y JWT&#10;├── controller/       # Controladores REST&#10;├── exception/        # Manejo global de excepciones&#10;├── model/           # Entidades y DTOs&#10;├── repository/      # Repositorios JPA&#10;├── security/        # Filtros y proveedores JWT&#10;├── service/         # Lógica de negocio&#10;└── util/           # Utilidades&#10;```&#10;&#10;##  Endpoints Principales&#10;&#10;### Autenticación&#10;```http&#10;POST /api/auth/register    # Registrar usuario&#10;POST /api/auth/login       # Iniciar sesión&#10;POST /api/auth/refresh     # Renovar token&#10;```&#10;&#10;### Gestión de Usuarios&#10;```http&#10;GET    /api/users          # Listar usuarios (paginado)&#10;GET    /api/users/{id}     # Obtener usuario por ID&#10;PUT    /api/users/{id}     # Actualizar usuario&#10;DELETE /api/users/{id}     # Eliminar usuario&#10;```&#10;&#10;##  Instalación y Uso&#10;&#10;### Prerequisitos&#10;- Java 21&#10;- Maven 3.6+&#10;- PostgreSQL 12+ (para producción)&#10;&#10;### Configuración Local&#10;1. **Clonar el repositorio**&#10;```bash&#10;git clone https://github.com/tu-usuario/user-management-api.git&#10;cd user-management-api&#10;```&#10;&#10;2. **Configurar base de datos**&#10;```bash&#10;# Crear base de datos PostgreSQL&#10;createdb user_management&#10;&#10;# O usar Docker&#10;docker run --name postgres-dev -e POSTGRES_DB=user_management -e POSTGRES_USER=user -e POSTGRES_PASSWORD=1234 -p 5432:5432 -d postgres:15&#10;```&#10;&#10;3. **Configurar variables de entorno** (opcional)&#10;```bash&#10;export DB_HOST=localhost&#10;export DB_PORT=5432&#10;export DB_NAME=user_management&#10;export DB_USERNAME=user&#10;export DB_PASSWORD=1234&#10;export JWT_SECRET=mySecretKeyForJWTTokenGeneration123456789&#10;```&#10;&#10;4. **Ejecutar la aplicación**&#10;```bash&#10;./mvnw spring-boot:run&#10;```&#10;&#10;La aplicación estará disponible en: `http://localhost:8086`&#10;&#10;### Docker (Recomendado)&#10;```bash&#10;# Levantar todo el stack&#10;docker-compose up -d&#10;&#10;# Solo la aplicación&#10;docker build -t user-management-api .&#10;docker run -p 8086:8086 user-management-api&#10;```&#10;&#10;##  Documentación API&#10;Una vez iniciada la aplicación, la documentación interactiva estará disponible en:&#10;- **Swagger UI**: http://localhost:8086/swagger-ui.html&#10;- **OpenAPI JSON**: http://localhost:8086/v3/api-docs&#10;&#10;##  Testing&#10;```bash&#10;# Ejecutar todos los tests&#10;./mvnw test&#10;&#10;# Test con cobertura&#10;./mvnw test jacoco:report&#10;```&#10;&#10;##  Monitoreo&#10;- **Health Check**: http://localhost:8086/actuator/health&#10;- **Métricas**: http://localhost:8086/actuator/metrics&#10;- **Info**: http://localhost:8086/actuator/info&#10;&#10;##  Ejemplos de Uso&#10;&#10;### Registrar Usuario&#10;```json&#10;POST /api/auth/register&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;firstName&quot;: &quot;Juan&quot;,&#10;  &quot;lastName&quot;: &quot;Pérez&quot;,&#10;  &quot;dateOfBirth&quot;: &quot;1990-03-15&quot;,&#10;  &quot;dni&quot;: &quot;12345678&quot;,&#10;  &quot;email&quot;: &quot;juan.perez@gmail.com&quot;,&#10;  &quot;username&quot;: &quot;juanperez90&quot;,&#10;  &quot;password&quot;: &quot;JuanP123!&quot;&#10;}&#10;```&#10;&#10;### Iniciar Sesión&#10;```json&#10;POST /api/auth/login&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;username&quot;: &quot;juanperez90&quot;,&#10;  &quot;password&quot;: &quot;JuanP123!&quot;&#10;}&#10;```&#10;&#10;### Respuesta con JWT&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;message&quot;: &quot;Login exitoso&quot;,&#10;  &quot;data&quot;: {&#10;    &quot;accessToken&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;,&#10;    &quot;refreshToken&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;,&#10;    &quot;tokenType&quot;: &quot;Bearer&quot;,&#10;    &quot;expiresIn&quot;: 86400&#10;  },&#10;  &quot;timestamp&quot;: &quot;2024-01-15T10:30:00&quot;,&#10;  &quot;status&quot;: 200&#10;}&#10;```&#10;&#10;##  Configuración de Desarrollo&#10;&#10;### Perfiles Disponibles&#10;- **dev**: Desarrollo local con PostgreSQL&#10;- **test**: Testing con H2 en memoria  &#10;- **prod**: Producción con configuraciones optimizadas&#10;&#10;### Variables de Entorno&#10;| Variable | Descripción | Valor por Defecto |&#10;|----------|-------------|-------------------|&#10;| `SPRING_PROFILES_ACTIVE` | Perfil activo | `dev` |&#10;| `DB_HOST` | Host de la base de datos | `localhost` |&#10;| `DB_PORT` | Puerto de la base de datos | `5432` |&#10;| `DB_NAME` | Nombre de la base de datos | `user_management` |&#10;| `JWT_SECRET` | Clave secreta para JWT | *(debe configurarse)* |&#10;| `SERVER_PORT` | Puerto del servidor | `8086` |&#10;&#10;##  Contribución&#10;1. Fork el proyecto&#10;2. Crea tu feature branch (`git checkout -b feature/nueva-funcionalidad`)&#10;3. Commit tus cambios (`git commit -m 'Agregar nueva funcionalidad'`)&#10;4. Push al branch (`git push origin feature/nueva-funcionalidad`)&#10;5. Abre un Pull Request&#10;&#10;##  Licencia&#10;Este proyecto está bajo la Licencia MIT - ver el archivo [LICENSE](LICENSE) para más detalles.&#10;&#10;## ‍ Autor&#10;**Santiago Sordi** - [GitHub](https://github.com/tu-usuario) - [LinkedIn](https://linkedin.com/in/tu-perfil)&#10;&#10;---&#10;⭐ ¡Si te gustó este proyecto, dale una estrella en GitHub!&#10;" />
              <option name="updatedContent" value="#  User Management API&#10;&#10;##  Descripción&#10;API REST para gestión de usuarios desarrollada con Spring Boot 3. Incluye autenticación JWT, operaciones CRUD completas y arquitectura profesional con manejo de excepciones.&#10;&#10;##  Tecnologías Utilizadas&#10;- **Java 21** - Lenguaje de programación&#10;- **Spring Boot 3.5.4** - Framework principal&#10;- **Spring Security** - Autenticación y autorización&#10;- **JWT** - Tokens de autenticación&#10;- **Spring Data JPA** - Persistencia de datos&#10;- **PostgreSQL** - Base de datos principal&#10;- **H2** - Base de datos para testing&#10;- **Flyway** - Migraciones de base de datos&#10;- **Maven** - Gestión de dependencias&#10;- **Swagger/OpenAPI** - Documentación de API&#10;- **Lombok** - Reducción de código boilerplate&#10;- **MapStruct** - Mapeo de objetos&#10;&#10;##  Características&#10;- ✅ **CRUD completo de usuarios**&#10;- ✅ **Autenticación JWT con refresh tokens**&#10;- ✅ **Validaciones de datos robustas**&#10;- ✅ **Manejo global de excepciones**&#10;- ✅ **Documentación automática con Swagger**&#10;- ✅ **Configuración por ambientes (dev/test/prod)**&#10;- ✅ **Migraciones de base de datos con Flyway**&#10;- ✅ **Testing unitario e integración**&#10;&#10;## ️ Arquitectura&#10;```&#10;src/main/java/com/sordi/userManagement/&#10;├── config/           # Configuraciones de seguridad y JWT&#10;├── controller/       # Controladores REST&#10;├── exception/        # Manejo global de excepciones&#10;├── model/           # Entidades y DTOs&#10;├── repository/      # Repositorios JPA&#10;├── security/        # Filtros y proveedores JWT&#10;├── service/         # Lógica de negocio&#10;└── util/           # Utilidades&#10;```&#10;&#10;##  Endpoints Principales&#10;&#10;### Autenticación&#10;```http&#10;POST /api/auth/register    # Registrar usuario&#10;POST /api/auth/login       # Iniciar sesión&#10;POST /api/auth/refresh     # Renovar token&#10;```&#10;&#10;### Gestión de Usuarios&#10;```http&#10;GET    /api/users          # Listar usuarios (paginado)&#10;GET    /api/users/{id}     # Obtener usuario por ID&#10;PUT    /api/users/{id}     # Actualizar usuario&#10;DELETE /api/users/{id}     # Eliminar usuario&#10;```&#10;&#10;##  Instalación y Uso&#10;&#10;### Prerequisitos&#10;- Java 21&#10;- Maven 3.6+&#10;- PostgreSQL 12+ (para producción)&#10;&#10;### Configuración Local&#10;1. **Clonar el repositorio**&#10;```bash&#10;git clone https://github.com/tu-usuario/user-management-api.git&#10;cd user-management-api&#10;```&#10;&#10;2. **Configurar base de datos**&#10;```bash&#10;# Crear base de datos PostgreSQL&#10;createdb user_management&#10;&#10;# O usar Docker&#10;docker run --name postgres-dev -e POSTGRES_DB=user_management -e POSTGRES_USER=user -e POSTGRES_PASSWORD=1234 -p 5432:5432 -d postgres:15&#10;```&#10;&#10;3. **Configurar variables de entorno** (opcional)&#10;```bash&#10;export DB_HOST=localhost&#10;export DB_PORT=5432&#10;export DB_NAME=user_management&#10;export DB_USERNAME=user&#10;export DB_PASSWORD=1234&#10;export JWT_SECRET=mySecretKeyForJWTTokenGeneration123456789&#10;```&#10;&#10;4. **Ejecutar la aplicación**&#10;```bash&#10;./mvnw spring-boot:run&#10;```&#10;&#10;La aplicación estará disponible en: `http://localhost:8086`&#10;&#10;### Docker (Recomendado)&#10;```bash&#10;# Levantar todo el stack&#10;docker-compose up -d&#10;&#10;# Solo la aplicación&#10;docker build -t user-management-api .&#10;docker run -p 8086:8086 user-management-api&#10;```&#10;&#10;##  Documentación API&#10;Una vez iniciada la aplicación, la documentación interactiva estará disponible en:&#10;- **Swagger UI**: http://localhost:8086/swagger-ui.html&#10;- **OpenAPI JSON**: http://localhost:8086/v3/api-docs&#10;&#10;##  Testing&#10;&#10;### Usuarios de Prueba Pre-configurados&#10;El sistema incluye usuarios de prueba que se crean automáticamente:&#10;&#10;| Usuario | Contraseña | Rol | Descripción |&#10;|---------|------------|-----|-------------|&#10;| `admin` | `Admin123!` | ADMIN | Usuario administrador |&#10;| `juan` | `User123!` | USER | Usuario regular |&#10;| `maria` | `User123!` | USER | Usuario regular |&#10;&#10;### Testing con Postman (Recomendado)&#10;1. **Importar colección**: Importa el archivo `postman/User_Management_API.postman_collection.json`&#10;2. **Login automático**: Usa los requests &quot;Login Admin&quot; o &quot;Login User Juan&quot;&#10;   - ✅ **El token se guarda automáticamente** - no necesitas copiarlo manualmente&#10;3. **Testear endpoints**: Todos los demás requests usarán el token automáticamente&#10;&#10;### Testing Manual&#10;```bash&#10;# 1. Login como admin&#10;curl -X POST http://localhost:8086/api/auth/login \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;Admin123!&quot;}'&#10;&#10;# 2. Usar el token en requests (reemplaza TOKEN_AQUI)&#10;curl -X GET http://localhost:8086/api/users/me \&#10;  -H &quot;Authorization: Bearer TOKEN_AQUI&quot;&#10;```&#10;&#10;### Ejecutar Tests Unitarios&#10;```bash&#10;# Ejecutar todos los tests&#10;./mvnw test&#10;&#10;# Test con cobertura&#10;./mvnw test jacoco:report&#10;```&#10;##  Monitoreo&#10;- **Health Check**: http://localhost:8086/actuator/health&#10;- **Métricas**: http://localhost:8086/actuator/metrics&#10;- **Info**: http://localhost:8086/actuator/info&#10;&#10;##  Ejemplos de Uso&#10;&#10;### Registrar Usuario&#10;```json&#10;POST /api/auth/register&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;firstName&quot;: &quot;Juan&quot;,&#10;  &quot;lastName&quot;: &quot;Pérez&quot;,&#10;  &quot;dateOfBirth&quot;: &quot;1990-03-15&quot;,&#10;  &quot;dni&quot;: &quot;12345678&quot;,&#10;  &quot;email&quot;: &quot;juan.perez@gmail.com&quot;,&#10;  &quot;username&quot;: &quot;juanperez90&quot;,&#10;  &quot;password&quot;: &quot;JuanP123!&quot;&#10;}&#10;```&#10;&#10;### Iniciar Sesión&#10;```json&#10;POST /api/auth/login&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;username&quot;: &quot;juanperez90&quot;,&#10;  &quot;password&quot;: &quot;JuanP123!&quot;&#10;}&#10;```&#10;&#10;### Respuesta con JWT&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;message&quot;: &quot;Login exitoso&quot;,&#10;  &quot;data&quot;: {&#10;    &quot;accessToken&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;,&#10;    &quot;refreshToken&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;,&#10;    &quot;tokenType&quot;: &quot;Bearer&quot;,&#10;    &quot;expiresIn&quot;: 86400&#10;  },&#10;  &quot;timestamp&quot;: &quot;2024-01-15T10:30:00&quot;,&#10;  &quot;status&quot;: 200&#10;}&#10;```&#10;&#10;##  Configuración de Desarrollo&#10;&#10;### Perfiles Disponibles&#10;- **dev**: Desarrollo local con PostgreSQL&#10;- **test**: Testing con H2 en memoria  &#10;- **prod**: Producción con configuraciones optimizadas&#10;&#10;### Variables de Entorno&#10;| Variable | Descripción | Valor por Defecto |&#10;|----------|-------------|-------------------|&#10;| `SPRING_PROFILES_ACTIVE` | Perfil activo | `dev` |&#10;| `DB_HOST` | Host de la base de datos | `localhost` |&#10;| `DB_PORT` | Puerto de la base de datos | `5432` |&#10;| `DB_NAME` | Nombre de la base de datos | `user_management` |&#10;| `JWT_SECRET` | Clave secreta para JWT | *(debe configurarse)* |&#10;| `SERVER_PORT` | Puerto del servidor | `8086` |&#10;&#10;##  Contribución&#10;1. Fork el proyecto&#10;2. Crea tu feature branch (`git checkout -b feature/nueva-funcionalidad`)&#10;3. Commit tus cambios (`git commit -m 'Agregar nueva funcionalidad'`)&#10;4. Push al branch (`git push origin feature/nueva-funcionalidad`)&#10;5. Abre un Pull Request&#10;&#10;##  Licencia&#10;Este proyecto está bajo la Licencia MIT - ver el archivo [LICENSE](LICENSE) para más detalles.&#10;&#10;## ‍ Autor&#10;**Santiago Sordi** - [GitHub](https://github.com/tu-usuario) - [LinkedIn](https://linkedin.com/in/tu-perfil)&#10;&#10;---&#10;⭐ ¡Si te gustó este proyecto, dale una estrella en GitHub!" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/query-methods-reference.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/query-methods-reference.md" />
              <option name="updatedContent" value="# Spring Data JPA Query Methods Reference&#10;&#10;## Palabras Clave Principales&#10;&#10;| Palabra Clave | Descripción | Ejemplo |&#10;|---------------|-------------|---------|&#10;| `find...By` | Buscar registros | `findByEmail(String email)` |&#10;| `get...By` | Alias para find | `getByUsername(String username)` |&#10;| `query...By` | Alias para find | `queryByFirstName(String name)` |&#10;| `count...By` | Contar registros | `countByActive(Boolean active)` |&#10;| `exists...By` | Verificar existencia | `existsByEmail(String email)` |&#10;| `delete...By` | Eliminar registros | `deleteByUsername(String username)` |&#10;| `remove...By` | Alias para delete | `removeByEmail(String email)` |&#10;&#10;## Operadores Lógicos&#10;&#10;| Operador | SQL Equivalente | Ejemplo |&#10;|----------|-----------------|---------|&#10;| `And` | `AND` | `findByFirstNameAndLastName(String first, String last)` |&#10;| `Or` | `OR` | `findByEmailOrUsername(String email, String username)` |&#10;| `Not` | `NOT` | `findByActiveNot(Boolean active)` |&#10;&#10;## Comparadores&#10;&#10;| Comparador | SQL Equivalente | Ejemplo |&#10;|------------|-----------------|---------|&#10;| `IsNull` | `IS NULL` | `findByEmailIsNull()` |&#10;| `IsNotNull` | `IS NOT NULL` | `findByEmailIsNotNull()` |&#10;| `Like` | `LIKE` | `findByFirstNameLike(String pattern)` |&#10;| `NotLike` | `NOT LIKE` | `findByFirstNameNotLike(String pattern)` |&#10;| `StartingWith` | `LIKE 'value%'` | `findByEmailStartingWith(String prefix)` |&#10;| `EndingWith` | `LIKE '%value'` | `findByEmailEndingWith(String suffix)` |&#10;| `Containing` | `LIKE '%value%'` | `findByFirstNameContaining(String substring)` |&#10;| `IgnoreCase` | `UPPER()` | `findByEmailIgnoreCase(String email)` |&#10;| `GreaterThan` | `&gt;` | `findByAgeGreaterThan(Integer age)` |&#10;| `LessThan` | `&lt;` | `findByAgeLessThan(Integer age)` |&#10;| `Between` | `BETWEEN` | `findByAgeBetween(Integer start, Integer end)` |&#10;| `In` | `IN` | `findByUsernameIn(Collection&lt;String&gt; usernames)` |&#10;&#10;## Ordenamiento y Limitación&#10;&#10;| Palabra Clave | Descripción | Ejemplo |&#10;|---------------|-------------|---------|&#10;| `OrderBy...Asc` | Ordenar ascendente | `findByActiveOrderByUsernameAsc(Boolean active)` |&#10;| `OrderBy...Desc` | Ordenar descendente | `findByActiveOrderByCreatedAtDesc(Boolean active)` |&#10;| `Top` | Limitar resultados | `findTop10ByActive(Boolean active)` |&#10;| `First` | Primer resultado | `findFirstByOrderByCreatedAtDesc()` |&#10;| `Distinct` | Resultados únicos | `findDistinctByLastName(String lastName)` |" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/postman/User_Management_API.postman_collection.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/postman/User_Management_API.postman_collection.json" />
              <option name="updatedContent" value="{&#10;  &quot;info&quot;: {&#10;    &quot;name&quot;: &quot;User Management API&quot;,&#10;    &quot;description&quot;: &quot;Colección completa para testear la API de gestión de usuarios&quot;,&#10;    &quot;schema&quot;: &quot;https://schema.getpostman.com/json/collection/v2.1.0/collection.json&quot;&#10;  },&#10;  &quot;auth&quot;: {&#10;    &quot;type&quot;: &quot;bearer&quot;,&#10;    &quot;bearer&quot;: [&#10;      {&#10;        &quot;key&quot;: &quot;token&quot;,&#10;        &quot;value&quot;: &quot;{{jwt_token}}&quot;,&#10;        &quot;type&quot;: &quot;string&quot;&#10;      }&#10;    ]&#10;  },&#10;  &quot;variable&quot;: [&#10;    {&#10;      &quot;key&quot;: &quot;base_url&quot;,&#10;      &quot;value&quot;: &quot;http://localhost:8086&quot;,&#10;      &quot;type&quot;: &quot;string&quot;&#10;    },&#10;    {&#10;      &quot;key&quot;: &quot;jwt_token&quot;,&#10;      &quot;value&quot;: &quot;&quot;,&#10;      &quot;type&quot;: &quot;string&quot;&#10;    }&#10;  ],&#10;  &quot;item&quot;: [&#10;    {&#10;      &quot;name&quot;: &quot; Authentication&quot;,&#10;      &quot;item&quot;: [&#10;        {&#10;          &quot;name&quot;: &quot;1. Login Admin&quot;,&#10;          &quot;event&quot;: [&#10;            {&#10;              &quot;listen&quot;: &quot;test&quot;,&#10;              &quot;script&quot;: {&#10;                &quot;exec&quot;: [&#10;                  &quot;if (pm.response.code === 200) {&quot;,&#10;                  &quot;    const response = pm.response.json();&quot;,&#10;                  &quot;    pm.collectionVariables.set('jwt_token', response.data.accessToken);&quot;,&#10;                  &quot;    console.log('Token guardado automáticamente');&quot;,&#10;                  &quot;}&quot;&#10;                ]&#10;              }&#10;            }&#10;          ],&#10;          &quot;request&quot;: {&#10;            &quot;method&quot;: &quot;POST&quot;,&#10;            &quot;header&quot;: [&#10;              {&#10;                &quot;key&quot;: &quot;Content-Type&quot;,&#10;                &quot;value&quot;: &quot;application/json&quot;&#10;              }&#10;            ],&#10;            &quot;body&quot;: {&#10;              &quot;mode&quot;: &quot;raw&quot;,&#10;              &quot;raw&quot;: &quot;{\n  \&quot;username\&quot;: \&quot;admin\&quot;,\n  \&quot;password\&quot;: \&quot;Admin123!\&quot;\n}&quot;&#10;            },&#10;            &quot;url&quot;: {&#10;              &quot;raw&quot;: &quot;{{base_url}}/api/auth/login&quot;,&#10;              &quot;host&quot;: [&quot;{{base_url}}&quot;],&#10;              &quot;path&quot;: [&quot;api&quot;, &quot;auth&quot;, &quot;login&quot;]&#10;            }&#10;          }&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;2. Login User Juan&quot;,&#10;          &quot;event&quot;: [&#10;            {&#10;              &quot;listen&quot;: &quot;test&quot;,&#10;              &quot;script&quot;: {&#10;                &quot;exec&quot;: [&#10;                  &quot;if (pm.response.code === 200) {&quot;,&#10;                  &quot;    const response = pm.response.json();&quot;,&#10;                  &quot;    pm.collectionVariables.set('jwt_token', response.data.accessToken);&quot;,&#10;                  &quot;    console.log('Token guardado automáticamente');&quot;,&#10;                  &quot;}&quot;&#10;                ]&#10;              }&#10;            }&#10;          ],&#10;          &quot;request&quot;: {&#10;            &quot;method&quot;: &quot;POST&quot;,&#10;            &quot;header&quot;: [&#10;              {&#10;                &quot;key&quot;: &quot;Content-Type&quot;,&#10;                &quot;value&quot;: &quot;application/json&quot;&#10;              }&#10;            ],&#10;            &quot;body&quot;: {&#10;              &quot;mode&quot;: &quot;raw&quot;,&#10;              &quot;raw&quot;: &quot;{\n  \&quot;username\&quot;: \&quot;juan\&quot;,\n  \&quot;password\&quot;: \&quot;User123!\&quot;\n}&quot;&#10;            },&#10;            &quot;url&quot;: {&#10;              &quot;raw&quot;: &quot;{{base_url}}/api/auth/login&quot;,&#10;              &quot;host&quot;: [&quot;{{base_url}}&quot;],&#10;              &quot;path&quot;: [&quot;api&quot;, &quot;auth&quot;, &quot;login&quot;]&#10;            }&#10;          }&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;3. Register New User&quot;,&#10;          &quot;request&quot;: {&#10;            &quot;method&quot;: &quot;POST&quot;,&#10;            &quot;header&quot;: [&#10;              {&#10;                &quot;key&quot;: &quot;Content-Type&quot;,&#10;                &quot;value&quot;: &quot;application/json&quot;&#10;              }&#10;            ],&#10;            &quot;body&quot;: {&#10;              &quot;mode&quot;: &quot;raw&quot;,&#10;              &quot;raw&quot;: &quot;{\n  \&quot;firstName\&quot;: \&quot;Carlos\&quot;,\n  \&quot;lastName\&quot;: \&quot;López\&quot;,\n  \&quot;dateOfBirth\&quot;: \&quot;1988-12-10\&quot;,\n  \&quot;dni\&quot;: \&quot;44444444\&quot;,\n  \&quot;email\&quot;: \&quot;carlos.lopez@email.com\&quot;,\n  \&quot;username\&quot;: \&quot;carlos\&quot;,\n  \&quot;password\&quot;: \&quot;Carlos123!\&quot;\n}&quot;&#10;            },&#10;            &quot;url&quot;: {&#10;              &quot;raw&quot;: &quot;{{base_url}}/api/auth/register&quot;,&#10;              &quot;host&quot;: [&quot;{{base_url}}&quot;],&#10;              &quot;path&quot;: [&quot;api&quot;, &quot;auth&quot;, &quot;register&quot;]&#10;            }&#10;          }&#10;        }&#10;      ]&#10;    },&#10;    {&#10;      &quot;name&quot;: &quot; User Management&quot;,&#10;      &quot;item&quot;: [&#10;        {&#10;          &quot;name&quot;: &quot;Get My Profile&quot;,&#10;          &quot;request&quot;: {&#10;            &quot;method&quot;: &quot;GET&quot;,&#10;            &quot;url&quot;: {&#10;              &quot;raw&quot;: &quot;{{base_url}}/api/users/me&quot;,&#10;              &quot;host&quot;: [&quot;{{base_url}}&quot;],&#10;              &quot;path&quot;: [&quot;api&quot;, &quot;users&quot;, &quot;me&quot;]&#10;            },&#10;            &quot;description&quot;: &quot;Obtiene el perfil del usuario autenticado&quot;&#10;          }&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;Get All Users&quot;,&#10;          &quot;request&quot;: {&#10;            &quot;method&quot;: &quot;GET&quot;,&#10;            &quot;url&quot;: {&#10;              &quot;raw&quot;: &quot;{{base_url}}/api/users?page=0&amp;size=10&quot;,&#10;              &quot;host&quot;: [&quot;{{base_url}}&quot;],&#10;              &quot;path&quot;: [&quot;api&quot;, &quot;users&quot;],&#10;              &quot;query&quot;: [&#10;                {&#10;                  &quot;key&quot;: &quot;page&quot;,&#10;                  &quot;value&quot;: &quot;0&quot;&#10;                },&#10;                {&#10;                  &quot;key&quot;: &quot;size&quot;,&#10;                  &quot;value&quot;: &quot;10&quot;&#10;                }&#10;              ]&#10;            }&#10;          }&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;Get User by ID&quot;,&#10;          &quot;request&quot;: {&#10;            &quot;method&quot;: &quot;GET&quot;,&#10;            &quot;url&quot;: {&#10;              &quot;raw&quot;: &quot;{{base_url}}/api/users/1&quot;,&#10;              &quot;host&quot;: [&quot;{{base_url}}&quot;],&#10;              &quot;path&quot;: [&quot;api&quot;, &quot;users&quot;, &quot;1&quot;]&#10;            }&#10;          }&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;Update User&quot;,&#10;          &quot;request&quot;: {&#10;            &quot;method&quot;: &quot;PUT&quot;,&#10;            &quot;header&quot;: [&#10;              {&#10;                &quot;key&quot;: &quot;Content-Type&quot;,&#10;                &quot;value&quot;: &quot;application/json&quot;&#10;              }&#10;            ],&#10;            &quot;body&quot;: {&#10;              &quot;mode&quot;: &quot;raw&quot;,&#10;              &quot;raw&quot;: &quot;{\n  \&quot;firstName\&quot;: \&quot;Juan Carlos\&quot;,\n  \&quot;lastName\&quot;: \&quot;Pérez Actualizado\&quot;,\n  \&quot;email\&quot;: \&quot;juan.actualizado@email.com\&quot;\n}&quot;&#10;            },&#10;            &quot;url&quot;: {&#10;              &quot;raw&quot;: &quot;{{base_url}}/api/users/2&quot;,&#10;              &quot;host&quot;: [&quot;{{base_url}}&quot;],&#10;              &quot;path&quot;: [&quot;api&quot;, &quot;users&quot;, &quot;2&quot;]&#10;            }&#10;          }&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;Delete User&quot;,&#10;          &quot;request&quot;: {&#10;            &quot;method&quot;: &quot;DELETE&quot;,&#10;            &quot;url&quot;: {&#10;              &quot;raw&quot;: &quot;{{base_url}}/api/users/4&quot;,&#10;              &quot;host&quot;: [&quot;{{base_url}}&quot;],&#10;              &quot;path&quot;: [&quot;api&quot;, &quot;users&quot;, &quot;4&quot;]&#10;            }&#10;          }&#10;        }&#10;      ]&#10;    },&#10;    {&#10;      &quot;name&quot;: &quot; System&quot;,&#10;      &quot;item&quot;: [&#10;        {&#10;          &quot;name&quot;: &quot;Health Check&quot;,&#10;          &quot;request&quot;: {&#10;            &quot;auth&quot;: {&#10;              &quot;type&quot;: &quot;noauth&quot;&#10;            },&#10;            &quot;method&quot;: &quot;GET&quot;,&#10;            &quot;url&quot;: {&#10;              &quot;raw&quot;: &quot;{{base_url}}/actuator/health&quot;,&#10;              &quot;host&quot;: [&quot;{{base_url}}&quot;],&#10;              &quot;path&quot;: [&quot;actuator&quot;, &quot;health&quot;]&#10;            }&#10;          }&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;API Documentation&quot;,&#10;          &quot;request&quot;: {&#10;            &quot;auth&quot;: {&#10;              &quot;type&quot;: &quot;noauth&quot;&#10;            },&#10;            &quot;method&quot;: &quot;GET&quot;,&#10;            &quot;url&quot;: {&#10;              &quot;raw&quot;: &quot;{{base_url}}/swagger-ui.html&quot;,&#10;              &quot;host&quot;: [&quot;{{base_url}}&quot;],&#10;              &quot;path&quot;: [&quot;swagger-ui.html&quot;]&#10;            }&#10;          }&#10;        }&#10;      ]&#10;    }&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/setup-env-windows.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/setup-env-windows.bat" />
              <option name="updatedContent" value="@echo off&#10;echo ========================================&#10;echo   Configurando Variables de Entorno&#10;echo   para User Management API&#10;echo ========================================&#10;&#10;REM Base de Datos&#10;set DB_HOST=localhost&#10;set DB_PORT=5432&#10;set DB_NAME=user_management&#10;set DB_USERNAME=dev_user&#10;set DB_PASSWORD=dev123&#10;&#10;REM JWT&#10;set JWT_SECRET=mi_super_secreto_jwt_key_de_32_caracteres_minimo&#10;set JWT_EXPIRATION_MS=86400000&#10;&#10;REM Logging&#10;set LOG_LEVEL_APP=DEBUG&#10;set LOG_LEVEL_SECURITY=DEBUG&#10;set SHOW_SQL=true&#10;&#10;REM Actuator&#10;set ACTUATOR_ENDPOINTS=health,info,metrics&#10;&#10;echo.&#10;echo ✅ Variables configuradas para esta sesión&#10;echo.&#10;echo Para hacerlas permanentes:&#10;echo 1. Panel de Control ^&gt; Sistema ^&gt; Variables de entorno&#10;echo 2. O usar: setx VARIABLE_NAME &quot;valor&quot;&#10;echo." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/config/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/config/SecurityConfig.java" />
              <option name="originalContent" value="package com.sordi.userManagement.config;&#10;&#10;import com.sordi.userManagement.security.CustomUserDetailsService;&#10;import com.sordi.userManagement.security.JwtAuthenticationFilter;&#10;import com.sordi.userManagement.security.JwtTokenProvider;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;&#10;import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;&#10;/**&#10; * Configuración de seguridad para la aplicación.&#10; * Define beans de seguridad, reglas de autenticación y autorización.&#10; */&#10;@Configuration&#10;@EnableWebSecurity&#10;@RequiredArgsConstructor&#10;public class SecurityConfig {&#10;&#10;    // Dependencias necesarias para la configuración de seguridad&#10;    private final CustomUserDetailsService customUserDetailsService;&#10;    private final JwtTokenProvider jwtTokenProvider;&#10;&#10;    /**&#10;     * Bean para el codificador de contraseñas.&#10;     */&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    /**&#10;     * Bean para el AuthenticationManager.&#10;     */&#10;    @Bean&#10;    public AuthenticationManager authenticationManager(&#10;            AuthenticationConfiguration authConfig) throws Exception {&#10;        return authConfig.getAuthenticationManager();&#10;    }&#10;&#10;    /**&#10;     * Bean de SecurityFilterChain - Define las reglas de seguridad de la aplicación.&#10;     */&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http&#10;            // Deshabilitar Cross-Site Request Forgery (CSRF)&#10;            .csrf(AbstractHttpConfigurer::disable)&#10;&#10;            // Configurar sesiones como STATELESS (para JWT)&#10;            // No guardamos estado en el servidor&#10;            .sessionManagement(session -&gt;&#10;                session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;&#10;            // Configurar qué endpoints requieren autenticación&#10;            .authorizeHttpRequests(auth -&gt; auth&#10;                // ENDPOINTS PÚBLICOS (sin autenticación)&#10;                .requestMatchers(&quot;/api/auth/**&quot;).permitAll()        // Login, register&#10;                .requestMatchers(&quot;/h2-console/**&quot;).permitAll()         // Base de datos H2 - solo desarrollo&#10;&#10;                // ENDPOINTS OPCIONALES&#10;                .requestMatchers(&quot;/swagger-ui/**&quot;).permitAll()         //  Documentación Swagger&#10;                .requestMatchers(&quot;/v3/api-docs/**&quot;).permitAll()        //  Datos para Swagger&#10;                .requestMatchers(&quot;/actuator/**&quot;).permitAll()           //  Monitoreo de aplicación&#10;&#10;                // ENDPOINTS PRIVADOS (requieren autenticación)&#10;                .anyRequest().authenticated()&#10;            )&#10;&#10;            // Configurar el filtro de autenticación JWT&#10;            // Este filtro intercepta las solicitudes y verifica el token JWT&#10;            // Si el token es válido, permite el acceso al recurso solicitado&#10;            .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)&#10;&#10;            // Configurar headers para H2 console (solo desarrollo)&#10;            // H2 usa frames y Spring Security los bloquea por defecto&#10;            .headers(headers -&gt; headers&#10;                .frameOptions(HeadersConfigurer.FrameOptionsConfig::disable)&#10;            );&#10;&#10;        return http.build();&#10;    }&#10;    @Bean&#10;    public JwtAuthenticationFilter jwtAuthenticationFilter() {&#10;        return new JwtAuthenticationFilter(jwtTokenProvider,customUserDetailsService);}&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sordi.userManagement.config;&#13;&#10;&#13;&#10;import com.sordi.userManagement.security.CustomUserDetailsService;&#13;&#10;import com.sordi.userManagement.security.JwtAuthenticationFilter;&#13;&#10;import com.sordi.userManagement.security.JwtTokenProvider;&#13;&#10;import lombok.RequiredArgsConstructor;&#13;&#10;import org.springframework.context.annotation.Bean;&#13;&#10;import org.springframework.context.annotation.Configuration;&#13;&#10;import org.springframework.security.authentication.AuthenticationManager;&#13;&#10;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;&#13;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#13;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#13;&#10;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;&#13;&#10;import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;&#13;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#13;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#13;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#13;&#10;import org.springframework.security.web.SecurityFilterChain;&#13;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#13;&#10;&#13;&#10;/**&#13;&#10; * Configuración de seguridad para la aplicación.&#13;&#10; * Define beans de seguridad, reglas de autenticación y autorización.&#13;&#10; */&#13;&#10;@Configuration&#13;&#10;@EnableWebSecurity&#13;&#10;@RequiredArgsConstructor&#13;&#10;public class SecurityConfig {&#13;&#10;&#13;&#10;    // Dependencias necesarias para la configuración de seguridad&#13;&#10;    private final CustomUserDetailsService customUserDetailsService;&#13;&#10;    private final JwtTokenProvider jwtTokenProvider;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Bean para el codificador de contraseñas.&#13;&#10;     */&#13;&#10;    @Bean&#13;&#10;    public PasswordEncoder passwordEncoder() {&#13;&#10;        return new BCryptPasswordEncoder();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Bean para el AuthenticationManager.&#13;&#10;     */&#13;&#10;    @Bean&#13;&#10;    public AuthenticationManager authenticationManager(&#13;&#10;            AuthenticationConfiguration authConfig) throws Exception {&#13;&#10;        return authConfig.getAuthenticationManager();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Bean de SecurityFilterChain - Define las reglas de seguridad de la aplicación.&#13;&#10;     */&#13;&#10;    @Bean&#13;&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#13;&#10;        http&#13;&#10;            // Deshabilitar Cross-Site Request Forgery (CSRF)&#13;&#10;            .csrf(AbstractHttpConfigurer::disable)&#13;&#10;&#13;&#10;            // Configurar sesiones como STATELESS (para JWT)&#13;&#10;            // No guardamos estado en el servidor&#13;&#10;            .sessionManagement(session -&gt;&#13;&#10;                session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#13;&#10;&#13;&#10;            // Configurar qué endpoints requieren autenticación&#13;&#10;            .authorizeHttpRequests(auth -&gt; auth&#13;&#10;                // ENDPOINTS PÚBLICOS (sin autenticación)&#13;&#10;                .requestMatchers(&quot;/api/auth/**&quot;).permitAll()        // Login, register&#13;&#10;                .requestMatchers(&quot;/h2-console/**&quot;).permitAll()         // Base de datos H2 - solo desarrollo&#13;&#10;&#13;&#10;                // ENDPOINTS OPCIONALES&#13;&#10;                .requestMatchers(&quot;/swagger-ui/**&quot;).permitAll()         //  Documentación Swagger&#13;&#10;                .requestMatchers(&quot;/v3/api-docs/**&quot;).permitAll()        //  Datos para Swagger&#13;&#10;                .requestMatchers(&quot;/actuator/**&quot;).permitAll()           //  Monitoreo de aplicación&#13;&#10;&#13;&#10;                // ENDPOINTS PRIVADOS CON ROLES&#13;&#10;                .requestMatchers(&quot;/api/users/**&quot;).hasAnyRole(&quot;USER&quot;, &quot;ADMIN&quot;)  // Usuarios autenticados&#13;&#10;                .requestMatchers(&quot;/api/admin/**&quot;).hasRole(&quot;ADMIN&quot;)             // Solo administradores&#13;&#10;&#13;&#10;                // ENDPOINTS PRIVADOS (requieren autenticación)&#13;&#10;                .anyRequest().authenticated()&#13;&#10;            )&#13;&#10;&#13;&#10;            // Configurar el filtro de autenticación JWT&#13;&#10;            // Este filtro intercepta las solicitudes y verifica el token JWT&#13;&#10;            // Si el token es válido, permite el acceso al recurso solicitado&#13;&#10;            .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)&#13;&#10;&#13;&#10;            // Configurar headers para H2 console (solo desarrollo)&#13;&#10;            // H2 usa frames y Spring Security los bloquea por defecto&#13;&#10;            .headers(headers -&gt; headers&#13;&#10;                .frameOptions(HeadersConfigurer.FrameOptionsConfig::disable)&#13;&#10;            );&#13;&#10;&#13;&#10;        return http.build();&#13;&#10;    }&#13;&#10;    @Bean&#13;&#10;    public JwtAuthenticationFilter jwtAuthenticationFilter() {&#13;&#10;        return new JwtAuthenticationFilter(jwtTokenProvider,customUserDetailsService);}&#13;&#10;&#13;&#10;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/config/WebConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/config/WebConfig.java" />
              <option name="updatedContent" value="package com.sordi.userManagement.config;&#10;&#10;import com.sordi.userManagement.interceptor.TokenRefreshInterceptor;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;&#10;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;&#10;&#10;/**&#10; * Configuración de interceptores HTTP&#10; */&#10;@Configuration&#10;@RequiredArgsConstructor&#10;public class WebConfig implements WebMvcConfigurer {&#10;&#10;    private final TokenRefreshInterceptor tokenRefreshInterceptor;&#10;&#10;    @Override&#10;    public void addInterceptors(InterceptorRegistry registry) {&#10;        registry.addInterceptor(tokenRefreshInterceptor)&#10;                .addPathPatterns(&quot;/api/**&quot;) // Aplicar a todas las rutas de la API&#10;                .excludePathPatterns(&#10;                    &quot;/api/auth/login&quot;,&#10;                    &quot;/api/auth/register&quot;, &#10;                    &quot;/api/auth/refresh&quot;&#10;                ); // Excluir endpoints públicos&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/controller/UserController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/controller/UserController.java" />
              <option name="originalContent" value="package com.sordi.userManagement.controller;&#10;&#10;import com.sordi.userManagement.model.dto.request.UpdateUserRequest;&#10;import com.sordi.userManagement.model.dto.response.UserResponse;&#10;import com.sordi.userManagement.service.UserService;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.validation.annotation.Validated;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController                    // Controlador REST para manejar usuarios&#10;@RequestMapping(&quot;/api/users&quot;)     //uRL base para los endpoints de usuario&#10;@RequiredArgsConstructor&#10;@Slf4j&#10;@Validated&#10;public class UserController {&#10;    &#10;    private final UserService userService;&#10;&#10;    /**&#10;     * Método para obtener todos los usuarios con paginación&#10;     * URL: GET /api/users?page=0&amp;size=10&#10;     */&#10;    @GetMapping&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    public ResponseEntity&lt;Page&lt;UserResponse&gt;&gt; getAllUsers(&#10;            @RequestParam(value = &quot;page&quot;, defaultValue = &quot;0&quot;) Integer page,&#10;            @RequestParam(value = &quot;size&quot;, defaultValue = &quot;10&quot;) Integer size&#10;    ) {&#10;        log.info(&quot;Obteniendo usuarios - Página: {}, Tamaño: {}&quot;, page, size);&#10;        Page&lt;UserResponse&gt; usuarios = userService.getAllUsers(page, size);&#10;        return ResponseEntity.ok(usuarios);&#10;    }&#10;&#10;    /**&#10;     * Método para obtener un usuario por su ID&#10;     * URL: GET /api/users/123&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    public ResponseEntity&lt;UserResponse&gt; getUserById(@PathVariable Long id) {&#10;        log.info(&quot;Obteniendo usuario con ID: {}&quot;, id);&#10;        UserResponse usuario = userService.getUserById(id);&#10;        return ResponseEntity.ok(usuario);&#10;    }&#10;&#10;    /**&#10;     * Método para actualizar un usuario existente&#10;     * URL: PUT /api/users/123&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    public ResponseEntity&lt;UserResponse&gt; updateUser(@PathVariable Long id, @RequestBody UpdateUserRequest request) {&#10;        log.info(&quot;Actualizando usuario con ID: {}&quot;, id);&#10;        UserResponse updatedUser = userService.updateUser(id, request);&#10;        return ResponseEntity.ok(updatedUser);&#10;    }&#10;&#10;    /**&#10;     * Método para eliminar un usuario&#10;     * URL: DELETE /api/users/123&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteUser(@PathVariable Long id) {&#10;        log.info(&quot;Eliminando usuario con ID: {}&quot;, id);&#10;        userService.deleteUser(id);&#10;        return ResponseEntity.noContent().build();  // HTTP 204 No Content&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sordi.userManagement.controller;&#10;&#10;import com.sordi.userManagement.model.dto.request.UpdateUserRequest;&#10;import com.sordi.userManagement.model.dto.response.UserResponse;&#10;import com.sordi.userManagement.service.UserService;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.validation.annotation.Validated;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController                    // Controlador REST para manejar usuarios&#10;@RequestMapping(&quot;/api/users&quot;)     //uRL base para los endpoints de usuario&#10;@RequiredArgsConstructor&#10;@Slf4j&#10;@Validated&#10;public class UserController {&#10;    &#10;    private final UserService userService;&#10;&#10;    /**&#10;     * Método para obtener todos los usuarios con paginación&#10;     * URL: GET /api/users?page=0&amp;size=10&#10;     */&#10;    @GetMapping&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    public ResponseEntity&lt;Page&lt;UserResponse&gt;&gt; getAllUsers(&#10;            @RequestParam(value = &quot;page&quot;, defaultValue = &quot;0&quot;) Integer page,&#10;            @RequestParam(value = &quot;size&quot;, defaultValue = &quot;10&quot;) Integer size&#10;    ) {&#10;        log.info(&quot;Obteniendo usuarios - Página: {}, Tamaño: {}&quot;, page, size);&#10;        Page&lt;UserResponse&gt; usuarios = userService.getAllUsers(page, size);&#10;        return ResponseEntity.ok(usuarios);&#10;    }&#10;&#10;    /**&#10;     * Método para obtener un usuario por su ID&#10;     * URL: GET /api/users/123&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    public ResponseEntity&lt;UserResponse&gt; getUserById(@PathVariable Long id) {&#10;        log.info(&quot;Obteniendo usuario con ID: {}&quot;, id);&#10;        UserResponse usuario = userService.getUserById(id);&#10;        return ResponseEntity.ok(usuario);&#10;    }&#10;&#10;    /**&#10;     * Método para actualizar un usuario existente&#10;     * URL: PUT /api/users/123&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    public ResponseEntity&lt;UserResponse&gt; updateUser(@PathVariable Long id, @RequestBody UpdateUserRequest request) {&#10;        log.info(&quot;Actualizando usuario con ID: {}&quot;, id);&#10;        UserResponse updatedUser = userService.updateUser(id, request);&#10;        return ResponseEntity.ok(updatedUser);&#10;    }&#10;&#10;    /**&#10;     * Método para eliminar un usuario&#10;     * URL: DELETE /api/users/123&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteUser(@PathVariable Long id) {&#10;        log.info(&quot;Eliminando usuario con ID: {}&quot;, id);&#10;        userService.deleteUser(id);&#10;        return ResponseEntity.noContent().build();  // HTTP 204 No Content&#10;    }&#10;&#10;    /**&#10;     * Método para obtener el perfil del usuario autenticado&#10;     * URL: GET /api/users/me&#10;     */&#10;    @GetMapping(&quot;/me&quot;)&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    public ResponseEntity&lt;UserResponse&gt; getCurrentUser(Authentication authentication) {&#10;        log.info(&quot;Obteniendo perfil de usuario autenticado: {}&quot;, authentication.getName());&#10;        UserResponse user = userService.getUserByUsername(authentication.getName());&#10;        return ResponseEntity.ok(user);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/interceptor/TokenRefreshInterceptor.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/interceptor/TokenRefreshInterceptor.java" />
              <option name="updatedContent" value="package com.sordi.userManagement.interceptor;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.sordi.userManagement.model.dto.response.TokenExpiredResponse;&#10;import com.sordi.userManagement.security.JwtTokenProvider;&#10;import io.jsonwebtoken.ExpiredJwtException;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.stereotype.Component;&#10;import org.springframework.util.StringUtils;&#10;import org.springframework.web.servlet.HandlerInterceptor;&#10;&#10;/**&#10; * Interceptor para manejar automáticamente la renovación de tokens&#10; * Se ejecuta ANTES de que llegue al controlador&#10; */&#10;@Component&#10;@RequiredArgsConstructor&#10;@Slf4j&#10;public class TokenRefreshInterceptor implements HandlerInterceptor {&#10;&#10;    private final JwtTokenProvider jwtTokenProvider;&#10;    private final ObjectMapper objectMapper = new ObjectMapper();&#10;&#10;    @Override&#10;    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {&#10;        &#10;        // Solo procesar rutas que requieren autenticación (excluir /auth/login, /auth/register, etc.)&#10;        String requestURI = request.getRequestURI();&#10;        if (isPublicEndpoint(requestURI)) {&#10;            return true; // Continuar sin validar token&#10;        }&#10;&#10;        String jwt = extractTokenFromRequest(request);&#10;        &#10;        if (jwt != null) {&#10;            try {&#10;                // Si el token es válido, continuar normalmente&#10;                if (jwtTokenProvider.validateToken(jwt)) {&#10;                    return true;&#10;                }&#10;            } catch (ExpiredJwtException ex) {&#10;                // Token expirado - enviar respuesta específica&#10;                log.info(&quot;Token expirado detectado en interceptor para usuario: {}&quot;, ex.getClaims().getSubject());&#10;                sendTokenExpiredResponse(response);&#10;                return false; // Detener procesamiento&#10;            }&#10;        }&#10;        &#10;        return true; // Continuar si no hay token o token inválido (lo manejará el filtro de seguridad)&#10;    }&#10;&#10;    /**&#10;     * Verifica si el endpoint es público (no requiere autenticación)&#10;     */&#10;    private boolean isPublicEndpoint(String requestURI) {&#10;        return requestURI.startsWith(&quot;/api/auth/login&quot;) ||&#10;               requestURI.startsWith(&quot;/api/auth/register&quot;) ||&#10;               requestURI.startsWith(&quot;/api/auth/refresh&quot;) ||&#10;               requestURI.startsWith(&quot;/actuator&quot;) ||&#10;               requestURI.startsWith(&quot;/swagger&quot;) ||&#10;               requestURI.startsWith(&quot;/v3/api-docs&quot;);&#10;    }&#10;&#10;    /**&#10;     * Extrae el token del header Authorization&#10;     */&#10;    private String extractTokenFromRequest(HttpServletRequest request) {&#10;        String bearerToken = request.getHeader(&quot;Authorization&quot;);&#10;        if (StringUtils.hasText(bearerToken) &amp;&amp; bearerToken.startsWith(&quot;Bearer &quot;)) {&#10;            return bearerToken.substring(7);&#10;        }&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Envía respuesta JSON indicando que el token expiró&#10;     */&#10;    private void sendTokenExpiredResponse(HttpServletResponse response) throws Exception {&#10;        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);&#10;        response.setContentType(&quot;application/json&quot;);&#10;        response.setCharacterEncoding(&quot;UTF-8&quot;);&#10;&#10;        TokenExpiredResponse expiredResponse = TokenExpiredResponse.createRefreshRequired();&#10;        String jsonResponse = objectMapper.writeValueAsString(expiredResponse);&#10;        &#10;        response.getWriter().write(jsonResponse);&#10;        response.getWriter().flush();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/Role.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/Role.java" />
              <option name="updatedContent" value="package com.sordi.userManagement.model;&#10;&#10;/**&#10; * Enum para los roles de usuario en el sistema&#10; */&#10;public enum Role {&#10;    USER,&#10;    ADMIN&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/User.java" />
              <option name="originalContent" value="package com.sordi.userManagement.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class User {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;first_name&quot;, nullable = false, length = 50)&#10;    private String firstName;&#10;&#10;    @Column(name = &quot;last_name&quot;, nullable = false, length = 50)&#10;    private String lastName;&#10;&#10;    @Column(name = &quot;date_of_birth&quot;, nullable = false)&#10;    private LocalDate dateOfBirth;&#10;&#10;    @Column(name = &quot;dni&quot;, nullable = false, unique = true, length = 10)&#10;    private String dni;&#10;&#10;    @Column(name = &quot;email&quot;, nullable = true, unique = true, length = 100)&#10;    private String email;&#10;&#10;    @Column(name = &quot;username&quot;, nullable = false, unique = true, length = 50)&#10;    private String username;&#10;&#10;    @Column(name = &quot;password&quot;, nullable = false, length = 100)&#10;    private String password;&#10;&#10;    @Column(name = &quot;created_at&quot;, nullable = false, updatable = false)&#10;    private LocalDateTime createdAt;&#10;&#10;    @Column(name = &quot;updated_at&quot;, nullable = false)&#10;    private LocalDateTime updatedAt;&#10;&#10;    @PrePersist&#10;    protected void onCreate() {&#10;        this.createdAt = LocalDateTime.now();&#10;        this.updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    @PreUpdate&#10;    protected void onUpdate() {&#10;        this.updatedAt = LocalDateTime.now();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sordi.userManagement.model;&#13;&#10;&#13;&#10;import jakarta.persistence.*;&#13;&#10;import lombok.AllArgsConstructor;&#13;&#10;import lombok.Data;&#13;&#10;import lombok.NoArgsConstructor;&#13;&#10;&#13;&#10;import java.time.LocalDate;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;&#13;&#10;@Entity&#13;&#10;@Table(name = &quot;users&quot;)&#13;&#10;@Data&#13;&#10;@NoArgsConstructor&#13;&#10;@AllArgsConstructor&#13;&#10;public class User {&#13;&#10;&#13;&#10;    @Id&#13;&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#13;&#10;    private Long id;&#13;&#10;&#13;&#10;    @Column(name = &quot;first_name&quot;, nullable = false, length = 50)&#13;&#10;    private String firstName;&#13;&#10;&#13;&#10;    @Column(name = &quot;last_name&quot;, nullable = false, length = 50)&#13;&#10;    private String lastName;&#13;&#10;&#13;&#10;    @Column(name = &quot;date_of_birth&quot;, nullable = false)&#13;&#10;    private LocalDate dateOfBirth;&#13;&#10;&#13;&#10;    @Column(name = &quot;dni&quot;, nullable = false, unique = true, length = 10)&#13;&#10;    private String dni;&#13;&#10;&#13;&#10;    @Column(name = &quot;email&quot;, nullable = true, unique = true, length = 100)&#13;&#10;    private String email;&#13;&#10;&#13;&#10;    @Column(name = &quot;username&quot;, nullable = false, unique = true, length = 50)&#13;&#10;    private String username;&#13;&#10;&#13;&#10;    @Column(name = &quot;password&quot;, nullable = false, length = 100)&#13;&#10;    private String password;&#13;&#10;&#13;&#10;    @Enumerated(EnumType.STRING)&#13;&#10;    @Column(name = &quot;role&quot;, nullable = false, length = 20)&#13;&#10;    private Role role = Role.USER;&#13;&#10;&#13;&#10;    @Column(name = &quot;created_at&quot;, nullable = false, updatable = false)&#13;&#10;    private LocalDateTime createdAt;&#13;&#10;&#13;&#10;    @Column(name = &quot;updated_at&quot;, nullable = false)&#13;&#10;    private LocalDateTime updatedAt;&#13;&#10;&#13;&#10;    @PrePersist&#13;&#10;    protected void onCreate() {&#13;&#10;        this.createdAt = LocalDateTime.now();&#13;&#10;        this.updatedAt = LocalDateTime.now();&#13;&#10;    }&#13;&#10;&#13;&#10;    @PreUpdate&#13;&#10;    protected void onUpdate() {&#13;&#10;        this.updatedAt = LocalDateTime.now();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/dto/mapper/UserMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/dto/mapper/UserMapper.java" />
              <option name="originalContent" value="package com.sordi.userManagement.model.dto.mapper;&#10;&#10;import com.sordi.userManagement.model.User;&#10;import com.sordi.userManagement.model.Role;&#10;import com.sordi.userManagement.model.dto.request.CreateUserRequest;&#10;import com.sordi.userManagement.model.dto.request.UpdateUserRequest;&#10;import com.sordi.userManagement.model.dto.response.UserResponse;&#10;import org.mapstruct.*;&#10;&#10;import java.util.List;&#10;&#10;@Mapper(&#10;        componentModel = &quot;spring&quot;,&#10;        injectionStrategy = InjectionStrategy.CONSTRUCTOR,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE&#10;)&#10;public interface UserMapper {&#10;&#10;    @Mappings({&#10;            @Mapping(target = &quot;fullName&quot;, expression =&quot;java(buildFullName(user.getFirstName(), user.getLastName()))&quot;),&#10;    })&#10;    UserResponse toResponse(User user);&#10;&#10;    @Mappings({&#10;            @Mapping(target = &quot;id&quot;, ignore = true), // Este campo no debe mappearse&#10;            @Mapping(target = &quot;createdAt&quot;, ignore = true), // Este campo se maneja automáticamente&#10;            @Mapping(target = &quot;updatedAt&quot;, ignore = true)&#10;    })&#10;    User toEntity(CreateUserRequest request);&#10;&#10;    @Mappings({&#10;            @Mapping(target = &quot;id&quot;, ignore = true), // Este campo no debe mappearse&#10;            @Mapping(target = &quot;dni&quot;, ignore = true), // DNI no se puede actualizar&#10;            @Mapping(target = &quot;createdAt&quot;, ignore = true),&#10;            @Mapping(target = &quot;updatedAt&quot;, ignore = true),&#10;            @Mapping(target = &quot;username&quot;, ignore = true),&#10;            @Mapping(target = &quot;password&quot;, ignore = true)&#10;    })&#10;    void updateEntity(@MappingTarget User user , UpdateUserRequest request);&#10;&#10;    List&lt;UserResponse&gt; toResponseList(List&lt;User&gt;users) ;&#10;&#10;    default String buildFullName(String firstName, String lastName){&#10;        if(firstName == null &amp;&amp; lastName == null) return &quot;&quot;;&#10;        if(firstName == null) return lastName;&#10;        if(lastName == null) return firstName;&#10;        return firstName + &quot; &quot; + lastName;&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sordi.userManagement.model.dto.mapper;&#10;&#10;import com.sordi.userManagement.model.User;&#10;import com.sordi.userManagement.model.Role;&#10;import com.sordi.userManagement.model.dto.request.CreateUserRequest;&#10;import com.sordi.userManagement.model.dto.request.UpdateUserRequest;&#10;import com.sordi.userManagement.model.dto.response.UserResponse;&#10;import org.mapstruct.*;&#10;&#10;import java.util.List;&#10;&#10;@Mapper(&#10;        componentModel = &quot;spring&quot;,&#10;        injectionStrategy = InjectionStrategy.CONSTRUCTOR,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE&#10;)&#10;public interface UserMapper {&#10;&#10;    @Mappings({&#10;            @Mapping(target = &quot;fullName&quot;, expression =&quot;java(buildFullName(user.getFirstName(), user.getLastName()))&quot;),&#10;    })&#10;    UserResponse toResponse(User user);&#10;&#10;    @Mappings({&#10;            @Mapping(target = &quot;id&quot;, ignore = true), // Este campo no debe mappearse&#10;            @Mapping(target = &quot;createdAt&quot;, ignore = true), // Este campo se maneja automáticamente&#10;            @Mapping(target = &quot;updatedAt&quot;, ignore = true),&#10;            @Mapping(target = &quot;role&quot;, expression = &quot;java(mapStringToRole(request.getRole()))&quot;)&#10;    })&#10;    User toEntity(CreateUserRequest request);&#10;&#10;    @Mappings({&#10;            @Mapping(target = &quot;id&quot;, ignore = true), // Este campo no debe mappearse&#10;            @Mapping(target = &quot;dni&quot;, ignore = true), // DNI no se puede actualizar&#10;            @Mapping(target = &quot;createdAt&quot;, ignore = true),&#10;            @Mapping(target = &quot;updatedAt&quot;, ignore = true),&#10;            @Mapping(target = &quot;username&quot;, ignore = true),&#10;            @Mapping(target = &quot;password&quot;, ignore = true)&#10;    })&#10;    void updateEntity(@MappingTarget User user , UpdateUserRequest request);&#10;&#10;    List&lt;UserResponse&gt; toResponseList(List&lt;User&gt;users) ;&#10;&#10;    default String buildFullName(String firstName, String lastName){&#10;        if(firstName == null &amp;&amp; lastName == null) return &quot;&quot;;&#10;        if(firstName == null) return lastName;&#10;        if(lastName == null) return firstName;&#10;        return firstName + &quot; &quot; + lastName;&#10;    }&#10;&#10;    default Role mapStringToRole(String role) {&#10;        if (role == null) {&#10;            return null;&#10;        }&#10;        return Role.valueOf(role.toUpperCase());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/dto/request/AdminUpdateUserRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/dto/request/AdminUpdateUserRequest.java" />
              <option name="updatedContent" value="package com.sordi.userManagement.model.dto.request;&#10; * DTO para actualización de usuario por parte del administrador.&#10; * Incluye campos que solo admin puede modificar como isActive.&#10; */&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Schema(description = &quot;Request para actualización de usuario por administrador&quot;)&#10;public class AdminUpdateUserRequest {&#10;&#10;    @Schema(description = &quot;Nombre del usuario&quot;, example = &quot;Juan&quot;)&#10;    @Size(min = 2, max = 50, message = &quot;El nombre debe tener entre 2 y 50 caracteres&quot;)&#10;    private String firstName;&#10;&#10;    @Schema(description = &quot;Apellido del usuario&quot;, example = &quot;Pérez&quot;)&#10;    @Size(min = 2, max = 50, message = &quot;El apellido debe tener entre 2 y 50 caracteres&quot;)&#10;    private String lastName;&#10;&#10;    @Schema(description = &quot;Email del usuario&quot;, example = &quot;juan.perez@email.com&quot;)&#10;    @Email(message = &quot;Formato de email inválido&quot;)&#10;    private String email;&#10;&#10;    @Schema(description = &quot;Estado activo del usuario&quot;, example = &quot;true&quot;)&#10;    private Boolean isActive; // ✅ Solo admin puede cambiar esto&#10;&#10;    @Schema(description = &quot;Rol del usuario&quot;, example = &quot;USER&quot;)&#10;    private String role; // ✅ Solo admin puede cambiar roles&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/dto/request/CreateUser.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/dto/request/CreateUser.java" />
              <option name="originalContent" value="package com.sordi.userManagement.model.dto.request;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Past;&#10;import jakarta.validation.constraints.Size;&#10;&#10;public class CreateUser {&#10;&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    @Size(min = 3, max = 50)&#10;    private String firstName;&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    @Size(min = 3, max = 50)&#10;    private String lastName;&#10;&#10;    @Past(message = &quot;Date of birth must be in the past&quot;)&#10;    private String dateOfBirth; // Format: YYYY-MM-DD&#10;&#10;    @NotBlank(message = &quot;DNI is required&quot;)&#10;    @Size(min = 7, max = 10, message = &quot;DNI must be between 7 and 10 characters&quot;)&#10;    private String dni;&#10;&#10;    @Email&#10;    @Size(max = 100, message = &quot;Email must be less than 100 characters&quot;)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Username is required&quot;)&#10;    @Size(min = 3, max = 50, message = &quot;Username must be between 3 and 50 characters&quot;)&#10;    private String username;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 6, max = 100, message = &quot;Password must be between 6 and 100 characters&quot;)&#10;    private String password;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sordi.userManagement.model.dto.request;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Past;&#10;import jakarta.validation.constraints.Pattern;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;&#10;/**&#10; * DTO for creating a new user.&#10; * Contains all required information for user registration.&#10; * &#10; * @author Santiago Sordi&#10; * @version 1.0&#10; */&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class CreateUserRequest {&#10;&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    @Size(min = 2, max = 50, message = &quot;First name must be between 2 and 50 characters&quot;)&#10;    @Pattern(regexp = &quot;^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$&quot;, message = &quot;First name can only contain letters and spaces&quot;)&#10;    private String firstName;&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    @Size(min = 2, max = 50, message = &quot;Last name must be between 2 and 50 characters&quot;)&#10;    @Pattern(regexp = &quot;^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$&quot;, message = &quot;Last name can only contain letters and spaces&quot;)&#10;    private String lastName;&#10;&#10;    @NotNull(message = &quot;Date of birth is required&quot;)&#10;    @Past(message = &quot;Date of birth must be in the past&quot;)&#10;    private LocalDate dateOfBirth;&#10;&#10;    @NotBlank(message = &quot;DNI is required&quot;)&#10;    @Pattern(regexp = &quot;^[0-9]{7,10}$&quot;, message = &quot;DNI must be between 7 and 10 digits&quot;)&#10;    private String dni;&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @Size(max = 100, message = &quot;Email must be less than 100 characters&quot;)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Username is required&quot;)&#10;    @Size(min = 3, max = 30, message = &quot;Username must be between 3 and 30 characters&quot;)&#10;    @Pattern(regexp = &quot;^[a-zA-Z0-9_]+$&quot;, message = &quot;Username can only contain letters, numbers and underscores&quot;)&#10;    private String username;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 8, max = 100, message = &quot;Password must be between 8 and 100 characters&quot;)&#10;    @Pattern(&#10;        regexp = &quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;])[A-Za-z\\d@$!%*?&amp;]+$&quot;,&#10;        message = &quot;Password must contain at least one lowercase letter, one uppercase letter, one digit and one special character&quot;&#10;    )&#10;    private String password;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/dto/request/CreateUserRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/dto/request/CreateUserRequest.java" />
              <option name="originalContent" value="package com.sordi.userManagement.model.dto.request;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Past;&#10;import jakarta.validation.constraints.Pattern;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;&#10;/**&#10; * DTO for creating a new user.&#10; * Contains all required information for user registration.&#10; *&#10; * @author Santiago Sordi&#10; * @version 1.0&#10; */&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class CreateUserRequest {&#10;&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    @Size(min = 2, max = 50, message = &quot;First name must be between 2 and 50 characters&quot;)&#10;    @Pattern(regexp = &quot;^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$&quot;, message = &quot;First name can only contain letters and spaces&quot;)&#10;    private String firstName;&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    @Size(min = 2, max = 50, message = &quot;Last name must be between 2 and 50 characters&quot;)&#10;    @Pattern(regexp = &quot;^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$&quot;, message = &quot;Last name can only contain letters and spaces&quot;)&#10;    private String lastName;&#10;&#10;    @NotNull(message = &quot;Date of birth is required&quot;)&#10;    @Past(message = &quot;Date of birth must be in the past&quot;)&#10;    private LocalDate dateOfBirth;&#10;&#10;    @NotBlank(message = &quot;DNI is required&quot;)&#10;    @Pattern(regexp = &quot;^[0-9]{7,10}$&quot;, message = &quot;DNI must be between 7 and 10 digits&quot;)&#10;    private String dni;&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @Size(max = 100, message = &quot;Email must be less than 100 characters&quot;)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Username is required&quot;)&#10;    @Size(min = 3, max = 30, message = &quot;Username must be between 3 and 30 characters&quot;)&#10;    @Pattern(regexp = &quot;^[a-zA-Z0-9_]+$&quot;, message = &quot;Username can only contain letters, numbers and underscores&quot;)&#10;    private String username;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 8, max = 100, message = &quot;Password must be between 8 and 100 characters&quot;)&#10;    @Pattern(&#10;        regexp = &quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;])[A-Za-z\\d@$!%*?&amp;]{8,}$&quot;,&#10;        message = &quot;Password must contain at least one lowercase letter, one uppercase letter, one digit and one special character&quot;&#10;    )&#10;    private String password;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sordi.userManagement.model.dto.request;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Past;&#10;import jakarta.validation.constraints.Pattern;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;&#10;/**&#10; * DTO for creating a new user.&#10; * Contains all required information for user registration.&#10; *&#10; * @author Santiago Sordi&#10; * @version 1.0&#10; */&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class CreateUserRequest {&#10;&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    @Size(min = 2, max = 50, message = &quot;First name must be between 2 and 50 characters&quot;)&#10;    @Pattern(regexp = &quot;^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$&quot;, message = &quot;First name can only contain letters and spaces&quot;)&#10;    private String firstName;&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    @Size(min = 2, max = 50, message = &quot;Last name must be between 2 and 50 characters&quot;)&#10;    @Pattern(regexp = &quot;^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$&quot;, message = &quot;Last name can only contain letters and spaces&quot;)&#10;    private String lastName;&#10;&#10;    @NotNull(message = &quot;Date of birth is required&quot;)&#10;    @Past(message = &quot;Date of birth must be in the past&quot;)&#10;    private LocalDate dateOfBirth;&#10;&#10;    @NotBlank(message = &quot;DNI is required&quot;)&#10;    @Pattern(regexp = &quot;^[0-9]{7,10}$&quot;, message = &quot;DNI must be between 7 and 10 digits&quot;)&#10;    private String dni;&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @Size(max = 100, message = &quot;Email must be less than 100 characters&quot;)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Username is required&quot;)&#10;    @Size(min = 3, max = 30, message = &quot;Username must be between 3 and 30 characters&quot;)&#10;    @Pattern(regexp = &quot;^[a-zA-Z0-9_]+$&quot;, message = &quot;Username can only contain letters, numbers and underscores&quot;)&#10;    private String username;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 8, max = 100, message = &quot;Password must be between 8 and 100 characters&quot;)&#10;    @Pattern(&#10;        regexp = &quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;])[A-Za-z\\d@$!%*?&amp;]{8,}$&quot;,&#10;        message = &quot;Password must contain at least one lowercase letter, one uppercase letter, one digit and one special character&quot;&#10;    )&#10;    private String password;&#10;&#10;    // Campo role opcional - por defecto será USER&#10;    private String role = &quot;USER&quot;; // Puede ser &quot;USER&quot; o &quot;ADMIN&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/dto/request/loguinRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/model/dto/request/loguinRequest.java" />
              <option name="originalContent" value="package com.sordi.userManagement.model.dto.request;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class loguinRequest {&#10;    private String username;&#10;    private String password;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sordi.userManagement.model.dto.request;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;/**&#10; * DTO for user authentication (login).&#10; * Contains credentials required for user login.&#10; * &#10; * @author Santiago Sordi&#10; * @version 1.0&#10; */&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class LoginRequest {&#10;    &#10;    @NotBlank(message = &quot;Username or email is required&quot;)&#10;    private String usernameOrEmail;&#10;    &#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    private String password;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/security/CustomUserDetailsService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/security/CustomUserDetailsService.java" />
              <option name="originalContent" value="package com.sordi.userManagement.security;&#10;&#10;import com.sordi.userManagement.model.User;&#10;import com.sordi.userManagement.repository.UserRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.core.userdetails.UsernameNotFoundException;&#10;import org.springframework.stereotype.Service;&#10;&#10;/**&#10; * Servicio personalizado para cargar detalles de usuario para Spring Security.&#10; *&#10; * Esta clase implementa UserDetailsService y es utilizada por Spring Security&#10; * para cargar información del usuario durante la autenticación.&#10; */&#10;@Service&#10;@RequiredArgsConstructor&#10;@Slf4j&#10;public class CustomUserDetailsService implements UserDetailsService {&#10;&#10;    private final UserRepository userRepository;&#10;&#10;    /**&#10;     * Carga un usuario por su nombre de usuario para Spring Security.&#10;     *&#10;     * @param username el nombre de usuario a buscar&#10;     * @return UserDetails objeto que Spring Security puede usar para autenticación&#10;     * @throws UsernameNotFoundException si el usuario no existe&#10;     */&#10;    @Override&#10;    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {&#10;        log.debug(&quot;Cargando usuario para autenticación: {}&quot;, username);&#10;&#10;        // Buscar usuario en la base de datos&#10;        User user = userRepository.findByUsername(username)&#10;            .orElseThrow(() -&gt; {&#10;                log.warn(&quot;Intento de login con usuario inexistente: {}&quot;, username);&#10;                return new UsernameNotFoundException(&quot;Usuario no encontrado: &quot; + username);&#10;            });&#10;&#10;        log.debug(&quot;Usuario encontrado: {}&quot;, username);&#10;&#10;        // Convertir nuestra entidad User a UserDetails que Spring Security entiende&#10;        return org.springframework.security.core.userdetails.User.builder()&#10;            .username(user.getUsername())&#10;            .password(user.getPassword()) // Ya viene encriptada de la BD&#10;            .authorities(&quot;ROLE_USER&quot;) // Roles del usuario&#10;            .accountExpired(false) // La cuenta no está expirada&#10;            .accountLocked(false) // La cuenta no está bloqueada&#10;            .credentialsExpired(false) // Las credenciales no están expiradas&#10;            .disabled(false) // La cuenta no está deshabilitada&#10;            .build();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sordi.userManagement.security;&#13;&#10;&#13;&#10;import com.sordi.userManagement.model.User;&#13;&#10;import com.sordi.userManagement.repository.UserRepository;&#13;&#10;import lombok.RequiredArgsConstructor;&#13;&#10;import lombok.extern.slf4j.Slf4j;&#13;&#10;import org.springframework.security.core.userdetails.UserDetails;&#13;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#13;&#10;import org.springframework.security.core.userdetails.UsernameNotFoundException;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;&#13;&#10;/**&#13;&#10; * Servicio personalizado para cargar detalles de usuario para Spring Security.&#13;&#10; *&#13;&#10; * Esta clase implementa UserDetailsService y es utilizada por Spring Security&#13;&#10; * para cargar información del usuario durante la autenticación.&#13;&#10; */&#13;&#10;@Service&#13;&#10;@RequiredArgsConstructor&#13;&#10;@Slf4j&#13;&#10;public class CustomUserDetailsService implements UserDetailsService {&#13;&#10;&#13;&#10;    private final UserRepository userRepository;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Carga un usuario por su nombre de usuario para Spring Security.&#13;&#10;     *&#13;&#10;     * @param username el nombre de usuario a buscar&#13;&#10;     * @return UserDetails objeto que Spring Security puede usar para autenticación&#13;&#10;     * @throws UsernameNotFoundException si el usuario no existe&#13;&#10;     */&#13;&#10;    @Override&#13;&#10;    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {&#13;&#10;        log.debug(&quot;Cargando usuario para autenticación: {}&quot;, username);&#13;&#10;&#13;&#10;        // Buscar usuario en la base de datos&#13;&#10;        User user = userRepository.findByUsername(username)&#13;&#10;            .orElseThrow(() -&gt; {&#13;&#10;                log.warn(&quot;Intento de login con usuario inexistente: {}&quot;, username);&#13;&#10;                return new UsernameNotFoundException(&quot;Usuario no encontrado: &quot; + username);&#13;&#10;            });&#13;&#10;&#13;&#10;        log.debug(&quot;Usuario encontrado: {}&quot;, username);&#13;&#10;&#13;&#10;        // Convertir nuestra entidad User a UserDetails que Spring Security entiende&#13;&#10;        return org.springframework.security.core.userdetails.User.builder()&#13;&#10;            .username(user.getUsername())&#13;&#10;            .password(user.getPassword()) // Ya viene encriptada de la BD&#13;&#10;            .authorities(&quot;ROLE_&quot; + user.getRole().name()) // Usar rol dinámico desde BD&#13;&#10;            .accountExpired(false) // La cuenta no está expirada&#13;&#10;            .accountLocked(false) // La cuenta no está bloqueada&#13;&#10;            .credentialsExpired(false) // Las credenciales no están expiradas&#13;&#10;            .disabled(false) // La cuenta no está deshabilitada&#13;&#10;            .build();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=user-management-api&#10;server.port=8085&#10;" />
              <option name="updatedContent" value="spring.application.name=user-management-api&#10;server.port=8086" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/db/migration/V2__Add_roles_and_test_data.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/db/migration/V2__Add_roles_and_test_data.sql" />
              <option name="updatedContent" value="-- Agregar columna role a la tabla users&#10;ALTER TABLE users ADD COLUMN role VARCHAR(20) NOT NULL DEFAULT 'USER';&#10;&#10;-- Crear índice para optimizar consultas por rol&#10;CREATE INDEX idx_users_role ON users(role);&#10;&#10;-- Insertar usuarios de prueba&#10;INSERT INTO users (first_name, last_name, date_of_birth, dni, email, username, password, role, created_at, updated_at) VALUES&#10;-- Admin user (password: Admin123!)&#10;('Admin', 'Sistema', '1990-01-01', '11111111', 'admin@sistema.com', 'admin', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2uheWG/igi.', 'ADMIN', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),&#10;&#10;-- Regular user (password: User123!)&#10;('Juan', 'Pérez', '1992-05-15', '22222222', 'juan.perez@email.com', 'juan', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2uheWG/igi.', 'USER', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),&#10;&#10;-- Another user (password: User123!)&#10;('María', 'García', '1995-08-20', '33333333', 'maria.garcia@email.com', 'maria', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2uheWG/igi.', 'USER', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);&#10;&#10;-- Comentarios para documentación&#10;COMMENT ON COLUMN users.role IS 'Rol del usuario: ADMIN, USER';" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>