<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env.example">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env.example" />
              <option name="updatedContent" value="# =================================================&#10;# Variables de Entorno para User Management API&#10;# =================================================&#10;# IMPORTANTE: Este archivo NO se sube a GitHub&#10;# Cópialo como .env y configura tus valores&#10;&#10;# =================================================&#10;# BASE DE DATOS POSTGRESQL&#10;# =================================================&#10;DB_HOST=localhost&#10;DB_PORT=5432&#10;DB_NAME=user_management&#10;DB_USERNAME=sordi005&#10;DB_PASSWORD=dev123&#10;&#10;# =================================================&#10;# PGADMIN (Herramienta gráfica para PostgreSQL)&#10;# =================================================&#10;PGADMIN_EMAIL=admin@example.com&#10;PGADMIN_PASSWORD=admin123&#10;PGADMIN_PORT=5050&#10;&#10;# =================================================&#10;# APLICACIÓN SPRING BOOT&#10;# =================================================&#10;SERVER_PORT=8086&#10;SPRING_PROFILE=dev&#10;&#10;# =================================================&#10;# JWT (JSON Web Tokens)&#10;# =================================================&#10;JWT_SECRET=mi_super_secreto_jwt_key_debe_tener_minimo_32_caracteres_para_ser_seguro&#10;JWT_EXPIRATION_MS=86400000&#10;&#10;# =================================================&#10;# LOGGING&#10;# =================================================&#10;LOG_LEVEL_APP=DEBUG&#10;LOG_LEVEL_SECURITY=DEBUG&#10;SHOW_SQL=true&#10;&#10;# =================================================&#10;# ACTUATOR (Monitoring)&#10;# =================================================&#10;ACTUATOR_ENDPOINTS=health,info,metrics" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/setup-env-windows.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/setup-env-windows.bat" />
              <option name="updatedContent" value="@echo off&#10;echo ========================================&#10;echo   Configurando Variables de Entorno&#10;echo   para User Management API&#10;echo ========================================&#10;&#10;REM Base de Datos&#10;set DB_HOST=localhost&#10;set DB_PORT=5432&#10;set DB_NAME=user_management&#10;set DB_USERNAME=dev_user&#10;set DB_PASSWORD=dev123&#10;&#10;REM JWT&#10;set JWT_SECRET=mi_super_secreto_jwt_key_de_32_caracteres_minimo&#10;set JWT_EXPIRATION_MS=86400000&#10;&#10;REM Logging&#10;set LOG_LEVEL_APP=DEBUG&#10;set LOG_LEVEL_SECURITY=DEBUG&#10;set SHOW_SQL=true&#10;&#10;REM Actuator&#10;set ACTUATOR_ENDPOINTS=health,info,metrics&#10;&#10;echo.&#10;echo ✅ Variables configuradas para esta sesión&#10;echo.&#10;echo Para hacerlas permanentes:&#10;echo 1. Panel de Control ^&gt; Sistema ^&gt; Variables de entorno&#10;echo 2. O usar: setx VARIABLE_NAME &quot;valor&quot;&#10;echo." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sordi/userManagement/repository/UserRepository.java" />
              <option name="originalContent" value="package com.sordi.userManagement.repository;&#10;&#10;import com.sordi.userManagement.model.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface UserRepository extends JpaRepository&lt;User, Long&gt; {&#10;    &#10;    User save(User entity);&#10;    &#10;    void delete(User entity);&#10;    &#10;    Optional&lt;User&gt; findById(Long id);&#10;    Optional&lt;User&gt; findByEmail(String email);&#10;    List&lt;User&gt; findAll();&#10;&#10;    boolean existsById(Long id);&#10;    boolean existsByEmail(String email);&#10;    boolean existsByUsername(String username);&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sordi.userManagement.repository;&#10;&#10;import com.sordi.userManagement.model.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repository interface for User entity.&#10; * &#10; * Provides CRUD operations and custom queries for User management.&#10; * Extends JpaRepository which provides basic CRUD operations.&#10; * &#10; * @author Santiago Sordi&#10; * @version 1.0&#10; */&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, Long&gt; {&#10;    &#10;    /**&#10;     * Find a user by their email address.&#10;     * &#10;     * @param email the email to search for&#10;     * @return Optional containing the user if found, empty otherwise&#10;     */&#10;    Optional&lt;User&gt; findByEmail(String email);&#10;    &#10;    /**&#10;     * Find a user by their username.&#10;     * &#10;     * @param username the username to search for&#10;     * @return Optional containing the user if found, empty otherwise&#10;     */&#10;    Optional&lt;User&gt; findByUsername(String username);&#10;    &#10;    /**&#10;     * Check if a user exists with the given email.&#10;     * &#10;     * @param email the email to check&#10;     * @return true if user exists, false otherwise&#10;     */&#10;    boolean existsByEmail(String email);&#10;    &#10;    /**&#10;     * Check if a user exists with the given username.&#10;     * &#10;     * @param username the username to check&#10;     * @return true if user exists, false otherwise&#10;     */&#10;    boolean existsByUsername(String username);&#10;    &#10;    /**&#10;     * Find a user by email or username (useful for login).&#10;     * &#10;     * @param email the email to search for&#10;     * @param username the username to search for&#10;     * @return Optional containing the user if found, empty otherwise&#10;     */&#10;    @Query(&quot;SELECT u FROM User u WHERE u.email = :email OR u.username = :username&quot;)&#10;    Optional&lt;User&gt; findByEmailOrUsername(@Param(&quot;email&quot;) String email, @Param(&quot;username&quot;) String username);&#10;    &#10;    /**&#10;     * Check if a user exists with the given email or username.&#10;     * &#10;     * @param email the email to check&#10;     * @param username the username to check&#10;     * @return true if user exists with either email or username, false otherwise&#10;     */&#10;    @Query(&quot;SELECT COUNT(u) &gt; 0 FROM User u WHERE u.email = :email OR u.username = :username&quot;)&#10;    boolean existsByEmailOrUsername(@Param(&quot;email&quot;) String email, @Param(&quot;username&quot;) String username);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=user-management-api&#10;server.port=8085&#10;" />
              <option name="updatedContent" value="spring.application.name=user-management-api&#10;server.port=8086" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>